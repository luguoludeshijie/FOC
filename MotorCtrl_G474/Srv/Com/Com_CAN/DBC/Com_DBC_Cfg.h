/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.11 Sun Jan  5 14:57:06 2025.
 */

#ifndef CTRL_H
#define CTRL_H

#ifdef __cplusplus
extern "C" {
#endif

#include "Srv.h"

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CTRL_EMS_0X201_FRAME_ID (0x201u)
#define CTRL_EMS_0X200_FRAME_ID (0x200u)
#define CTRL_EMS_0X180_FRAME_ID (0x180u)

/* Frame lengths in bytes. */
#define CTRL_EMS_0X201_LENGTH (8u)
#define CTRL_EMS_0X200_LENGTH (8u)
#define CTRL_EMS_0X180_LENGTH (8u)

/* Extended or standard frame types. */
#define CTRL_EMS_0X201_IS_EXTENDED (0)
#define CTRL_EMS_0X200_IS_EXTENDED (0)
#define CTRL_EMS_0X180_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define CTRL_EMS_0X201_NAME "EMS_0x201"
#define CTRL_EMS_0X200_NAME "EMS_0x200"
#define CTRL_EMS_0X180_NAME "EMS_0x180"

/* Signal Names. */
#define CTRL_EMS_0X201_MOTOR_TOR_IQ_KP_NAME "MotorTor_Iq_Kp"
#define CTRL_EMS_0X201_MOTOR_TOR_IQ_KI_NAME "MotorTor_Iq_Ki"
#define CTRL_EMS_0X200_MOTOR_TOR_ID_KP_NAME "MotorTor_Id_Kp"
#define CTRL_EMS_0X200_MOTOR_TOR_ID_KI_NAME "MotorTor_Id_Ki"
#define CTRL_EMS_0X180_MOTOR_M_ANGLE_NAME "Motor_MAngle"
#define CTRL_EMS_0X180_MOTOR_E_ANGLE_NAME "Motor_EAngle"

/**
 * Signals in message EMS_0x201.
 *
 * All signal values are as on the CAN bus.
 */
struct ctrl_ems_0x201_t {
    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_tor_iq_kp;

    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_tor_iq_ki;
};

/**
 * Signals in message EMS_0x200.
 *
 * All signal values are as on the CAN bus.
 */
struct ctrl_ems_0x200_t {
    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_tor_id_kp;

    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_tor_id_ki;
};

/**
 * Signals in message EMS_0x180.
 *
 * EMS�����Է����ı���
 *
 * All signal values are as on the CAN bus.
 */
struct ctrl_ems_0x180_t {
    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_m_angle;

    /**
     * Range: -3.4e+38..3.4e+38 (-3.4e+38..3.4e+38 -)
     * Scale: 1
     * Offset: 0
     */
    float motor_e_angle;
};

/**
 * Unpack message EMS_0x201.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ctrl_ems_0x201_unpack(
    struct ctrl_ems_0x201_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EMS_0x201.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ctrl_ems_0x201_init(struct ctrl_ems_0x201_t *msg_p);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ctrl_ems_0x201_motor_tor_iq_kp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x201_motor_tor_iq_kp_is_in_range(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ctrl_ems_0x201_motor_tor_iq_ki_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x201_motor_tor_iq_ki_is_in_range(float value);

/**
 * Unpack message EMS_0x200.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ctrl_ems_0x200_unpack(
    struct ctrl_ems_0x200_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EMS_0x200.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ctrl_ems_0x200_init(struct ctrl_ems_0x200_t *msg_p);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ctrl_ems_0x200_motor_tor_id_kp_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x200_motor_tor_id_kp_is_in_range(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ctrl_ems_0x200_motor_tor_id_ki_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x200_motor_tor_id_ki_is_in_range(float value);

/**
 * Pack message EMS_0x180.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ctrl_ems_0x180_pack(
    uint8_t *dst_p,
    const struct ctrl_ems_0x180_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EMS_0x180.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ctrl_ems_0x180_init(struct ctrl_ems_0x180_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ctrl_ems_0x180_motor_m_angle_encode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x180_motor_m_angle_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float ctrl_ems_0x180_motor_e_angle_encode(double value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ctrl_ems_0x180_motor_e_angle_is_in_range(float value);


#ifdef __cplusplus
}
#endif

#endif
